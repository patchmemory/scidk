# Fish-compatible SciDK Environment Initialization Script
# Usage:
#   source scripts/init_env.fish [--write-dotenv] [--force]

functions -q __scidk_parse_args; and functions -e __scidk_parse_args
function __scidk_parse_args -a argv
    set -l write_dotenv 0
    set -l force 0
    for a in $argv
        switch $a
            case --write-dotenv --dotenv
                set write_dotenv 1
            case --force
                set force 1
        end
    end
    echo "$write_dotenv $force"
end

set -l parsed (__scidk_parse_args $argv)
set -l WRITE_DOTENV (echo $parsed | awk '{print $1}')
set -l FORCE (echo $parsed | awk '{print $2}')

# Helper: set default only if not already set or if --force provided
functions -q __scidk_set_default; and functions -e __scidk_set_default
function __scidk_set_default -a name default
    if test "$FORCE" = "1"
        set -gx $name $default
    else if not set -q $name
        set -gx $name $default
    else if test (string length -- $$name) -eq 0
        set -gx $name $default
    end
end

# SciDK app defaults
__scidk_set_default SCIDK_HOST "127.0.0.1"
__scidk_set_default SCIDK_PORT "5000"
__scidk_set_default SCIDK_DEBUG "1"

# Neo4j connectivity defaults
__scidk_set_default NEO4J_URI "bolt://localhost:7687"
__scidk_set_default NEO4J_USER "neo4j"
__scidk_set_default NEO4J_AUTH "neo4j/neo4jpassword"

# Derive password unless present or FORCE
if test -z "$NEO4J_PASSWORD" -o "$FORCE" = "1"
    if string match -q '*/ *' -- $NEO4J_AUTH
        # not expected due to space, fallback
        set -gx NEO4J_PASSWORD neo4jpassword
    else if string match -q '*/ *' -- $NEO4J_AUTH
        set -gx NEO4J_PASSWORD neo4jpassword
    else if string match -qr '/' -- $NEO4J_AUTH
        set -gx NEO4J_PASSWORD (string split -m1 '/' -- $NEO4J_AUTH)[2]
    else
        set -gx NEO4J_PASSWORD neo4jpassword
    end
end

# Neo4j tuning
__scidk_set_default NEO4J_HEAP_INIT "1G"
__scidk_set_default NEO4J_HEAP_MAX "2G"

# Python convenience
__scidk_set_default PYTHONUNBUFFERED "1"

function __scidk_summary
    echo "SciDK environment initialized:"
    echo "  SCIDK_HOST=$SCIDK_HOST"
    echo "  SCIDK_PORT=$SCIDK_PORT"
    echo "  SCIDK_DEBUG=$SCIDK_DEBUG"
    echo ""
    echo "Neo4j connection:"
    echo "  NEO4J_URI=$NEO4J_URI"
    echo "  NEO4J_USER=$NEO4J_USER"
    echo "  NEO4J_PASSWORD=********"
    echo ""
    echo "Neo4j tuning (compose/singularity):"
    echo "  NEO4J_HEAP_INIT=$NEO4J_HEAP_INIT"
    echo "  NEO4J_HEAP_MAX=$NEO4J_HEAP_MAX"
    echo "  NEO4J_AUTH=$NEO4J_AUTH"
    echo ""
    echo "Tip:"
    echo "  - To start the Flask app:  scidk-serve"
    echo "  - To start Neo4j via compose: docker compose -f docker-compose.neo4j.yml up -d"
end

function __scidk_write_dotenv
    set -l dotenv_path .env
    printf "# Generated by scripts/init_env.fish\n" > $dotenv_path
    printf "# SciDK app\n" >> $dotenv_path
    printf "SCIDK_HOST=%s\n" "$SCIDK_HOST" >> $dotenv_path
    printf "SCIDK_PORT=%s\n" "$SCIDK_PORT" >> $dotenv_path
    printf "SCIDK_DEBUG=%s\n\n" "$SCIDK_DEBUG" >> $dotenv_path
    printf "# Neo4j connection\n" >> $dotenv_path
    printf "NEO4J_URI=%s\n" "$NEO4J_URI" >> $dotenv_path
    printf "NEO4J_USER=%s\n" "$NEO4J_USER" >> $dotenv_path
    printf "NEO4J_PASSWORD=%s\n" "$NEO4J_PASSWORD" >> $dotenv_path
    printf "# Also used by docker compose for the database container\n" >> $dotenv_path
    printf "NEO4J_AUTH=%s\n\n" "$NEO4J_AUTH" >> $dotenv_path
    printf "# Neo4j tuning for container runs\n" >> $dotenv_path
    printf "NEO4J_HEAP_INIT=%s\n" "$NEO4J_HEAP_INIT" >> $dotenv_path
    printf "NEO4J_HEAP_MAX=%s\n" "$NEO4J_HEAP_MAX" >> $dotenv_path
    echo "Wrote $dotenv_path."
end

if test "$WRITE_DOTENV" = "1"
    __scidk_write_dotenv
end

__scidk_summary

# Cleanup helper functions from scope
functions -e __scidk_parse_args
functions -e __scidk_set_default
functions -e __scidk_summary
functions -e __scidk_write_dotenv
