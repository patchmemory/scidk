#!/bin/sh
# SciDK Environment Initialization Script (POSIX sh)
#
# Usage:
#   . scripts/init_env.sh [--write-dotenv] [--force]
#   source scripts/init_env.sh [--write-dotenv] [--force]   # in bash/zsh
#
# Notes:
# - Prefer sourcing this script so exported variables persist in your shell.
# - If executed (not sourced), variables will not persist in your session.

set -eu

WRITE_DOTENV=0
FORCE=0

# Parse simple flags
for arg in "$@"; do
  case "$arg" in
    --write-dotenv|--dotenv)
      WRITE_DOTENV=1
      ;;
    --force)
      FORCE=1
      ;;
  esac
done

# Helper: set default only if not already set or if --force provided
set_default() {
  var_name="$1"
  default_val="$2"
  # shellcheck disable=SC2086
  if [ "$FORCE" = "1" ]; then
    eval "export ${var_name}=''" # placeholder to allow values with spaces
    eval "${var_name}=" >/dev/null 2>&1 || true
    eval "export ${var_name}='$default_val'"
  else
    # If unset or empty
    eval "val=\"\${${var_name}:-}\""
    if [ -z "${val}" ]; then
      eval "export ${var_name}='$default_val'"
    fi
  fi
}

# SciDK app defaults
set_default SCIDK_HOST "127.0.0.1"
set_default SCIDK_PORT "5000"
set_default SCIDK_DEBUG "1"   # 1 = debug on

# Neo4j connectivity defaults
set_default NEO4J_URI "bolt://localhost:7687"
set_default NEO4J_USER "neo4j"

# If NEO4J_AUTH is provided (format user/pass), use it to derive password unless NEO4J_PASSWORD is set
set_default NEO4J_AUTH "neo4j/neo4jiscool"
# Derive password unless present or FORCE
NEO4J_PASSWORD_VAL="${NEO4J_PASSWORD:-}"
if [ -z "$NEO4J_PASSWORD_VAL" ] || [ "$FORCE" = "1" ]; then
  case "$NEO4J_AUTH" in
    */*) NEO4J_PASSWORD_VAL="${NEO4J_AUTH#*/}" ;;
    *) NEO4J_PASSWORD_VAL="neo4jpassword" ;;
  esac
  export NEO4J_PASSWORD="$NEO4J_PASSWORD_VAL"
fi

# Neo4j tuning (used by docker compose or singularity image)
set_default NEO4J_HEAP_INIT "1G"
set_default NEO4J_HEAP_MAX "2G"

# Enable useful default for Python runtime
set_default PYTHONUNBUFFERED "1"

summary() {
  printf "%s\n" "SciDK environment initialized:" \
    "  SCIDK_HOST=${SCIDK_HOST}" \
    "  SCIDK_PORT=${SCIDK_PORT}" \
    "  SCIDK_DEBUG=${SCIDK_DEBUG}" \
    "" \
    "Neo4j connection:" \
    "  NEO4J_URI=${NEO4J_URI}" \
    "  NEO4J_USER=${NEO4J_USER}" \
    "  NEO4J_PASSWORD=********" \
    "" \
    "Neo4j tuning (compose/singularity):" \
    "  NEO4J_HEAP_INIT=${NEO4J_HEAP_INIT}" \
    "  NEO4J_HEAP_MAX=${NEO4J_HEAP_MAX}" \
    "  NEO4J_AUTH=${NEO4J_AUTH}" \
    "" \
    "Tip:" \
    "  - To start the Flask app:  scidk-serve" \
    "  - To start Neo4j via compose: docker compose -f docker-compose.neo4j.yml up -d"
}

write_dotenv() {
  dotenv_path=".env"
  # Write using current values
  {
    printf "%s\n" "# Generated by scripts/init_env.sh"
    printf "%s\n" "# SciDK app"
    printf "SCIDK_HOST=%s\n" "$SCIDK_HOST"
    printf "SCIDK_PORT=%s\n" "$SCIDK_PORT"
    printf "SCIDK_DEBUG=%s\n\n" "$SCIDK_DEBUG"
    printf "%s\n" "# Neo4j connection"
    printf "NEO4J_URI=%s\n" "$NEO4J_URI"
    printf "NEO4J_USER=%s\n" "$NEO4J_USER"
    printf "NEO4J_PASSWORD=%s\n" "$NEO4J_PASSWORD"
    printf "%s\n" "# Also used by docker compose for the database container"
    printf "NEO4J_AUTH=%s\n\n" "$NEO4J_AUTH"
    printf "%s\n" "# Neo4j tuning for container runs"
    printf "NEO4J_HEAP_INIT=%s\n" "$NEO4J_HEAP_INIT"
    printf "NEO4J_HEAP_MAX=%s\n" "$NEO4J_HEAP_MAX"
  } > "$dotenv_path"
  printf "Wrote %s.\n" "$dotenv_path"
}

if [ "$WRITE_DOTENV" = "1" ]; then
  write_dotenv
fi

summary

# Cannot reliably detect sourcing in POSIX sh; print a generic note.
printf "%s\n" "Note: If you executed this script instead of sourcing it, variables won't persist. Use: . scripts/init_env.sh" 1>&2
